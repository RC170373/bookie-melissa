/**
 * Script de correction rapide sans CSV
 * - Corrige tous les caract√®res mal encod√©s (√ß, √©, √®, etc.)
 * - R√©cup√®re toutes les couvertures manquantes
 */

import { PrismaClient } from '../node_modules/@prisma/client/default.js'

const prisma = new PrismaClient()

// Fonction pour corriger l'encodage Windows-1252 -> UTF-8
function fixEncoding(text: string): string {
  if (!text) return text
  
  return text
    // Lowercase accented characters
    .replace(/√É¬©/g, '√©')   // √© (e acute)
    .replace(/√É¬®/g, '√®')   // √® (e grave)
    .replace(/√É¬™/g, '√™')   // √™ (e circumflex)
    .replace(/√É¬´/g, '√´')   // √´ (e diaeresis)
    .replace(/√É /g, '√†')   // √† (a grave)
    .replace(/√É¬¢/g, '√¢')   // √¢ (a circumflex)
    .replace(/√É¬¥/g, '√¥')   // √¥ (o circumflex)
    .replace(/√É¬π/g, '√π')   // √π (u grave)
    .replace(/√É¬ª/g, '√ª')   // √ª (u circumflex)
    .replace(/√É¬Æ/g, '√Æ')   // √Æ (i circumflex)
    .replace(/√É¬Ø/g, '√Ø')   // √Ø (i diaeresis)
    .replace(/√É¬ß/g, '√ß')   // √ß (c cedilla) - LE PLUS IMPORTANT!
    .replace(/√Ö\u0093/g, '≈ì') // ≈ì (oe ligature)
    // Uppercase accented characters
    .replace(/√É\u0089/g, '√â')
    .replace(/√É\u0088/g, '√à')
    .replace(/√É\u008A/g, '√ä')
    .replace(/√É\u0080/g, '√Ä')
    .replace(/√É\u0082/g, '√Ç')
    .replace(/√É\u0094/g, '√î')
    .replace(/√É\u0099/g, '√ô')
    .replace(/√É\u009B/g, '√õ')
    .replace(/√É\u008E/g, '√é')
    .replace(/√É\u0087/g, '√á')
    .replace(/√Ö\u0092/g, '≈í')
    // Patterns sp√©cifiques observ√©s
    .replace(/Fran[e√©]aise/g, 'Fran√ßaise')  // Fix "Franeaise" -> "Fran√ßaise"
    .replace(/fran[e√©]ais/g, 'fran√ßais')
    // Fallback
    .replace(/ÔøΩ/g, 'e')
}

// Fonction pour r√©cup√©rer les m√©tadonn√©es Google Books
async function fetchGoogleBooksMetadata(book: { isbn: string | null; title: string; author: string }) {
  try {
    const strategies = []

    if (book.isbn && book.isbn.length >= 10) {
      strategies.push(`isbn:${book.isbn}`)
    }

    strategies.push(`intitle:"${book.title}"+inauthor:"${book.author}"`)
    strategies.push(`intitle:${book.title}+inauthor:${book.author}`)

    const cleanTitle = book.title.split(',')[0].split(':')[0].trim()
    strategies.push(`intitle:"${cleanTitle}"`)

    for (const searchQuery of strategies) {
      try {
        const response = await fetch(
          `https://www.googleapis.com/books/v1/volumes?q=${encodeURIComponent(searchQuery)}&maxResults=5&langRestrict=fr`
        )

        if (!response.ok) continue

        const data = await response.json()
        if (!data.items || data.items.length === 0) continue

        for (const item of data.items) {
          const volumeInfo = item.volumeInfo

          const titleMatch = volumeInfo.title?.toLowerCase().includes(cleanTitle.toLowerCase())
          const authorMatch = volumeInfo.authors?.some((a: string) =>
            a.toLowerCase().includes(book.author.toLowerCase()) ||
            book.author.toLowerCase().includes(a.toLowerCase())
          )

          if (titleMatch || authorMatch || book.isbn) {
            return {
              coverUrl: volumeInfo.imageLinks?.thumbnail?.replace('http://', 'https://') ||
                        volumeInfo.imageLinks?.smallThumbnail?.replace('http://', 'https://') || null,
              description: volumeInfo.description || null,
              pageCount: volumeInfo.pageCount || null,
              publishedDate: volumeInfo.publishedDate || null,
            }
          }
        }
      } catch (err) {
        continue
      }
    }

    return null
  } catch (error) {
    return null
  }
}

async function main() {
  console.log('üöÄ D√©marrage de la correction automatique...\n')

  // R√©cup√©rer tous les livres
  const allBooks = await prisma.book.findMany()
  console.log(`üìö ${allBooks.length} livres trouv√©s\n`)

  let fixedEncoding = 0
  let addedCovers = 0
  let errors = 0
  let processed = 0

  for (const book of allBooks) {
    try {
      processed++
      const updates: any = {}
      let hasChanges = false
      
      // Corriger l'encodage
      if (book.title && (book.title.includes('√É') || book.title.includes('ÔøΩ') || book.title.includes('Fran'))) {
        const fixed = fixEncoding(book.title)
        if (fixed !== book.title) {
          updates.title = fixed
          hasChanges = true
          console.log(`‚úèÔ∏è  Titre: "${book.title}" -> "${fixed}"`)
        }
      }
      
      if (book.author && (book.author.includes('√É') || book.author.includes('ÔøΩ'))) {
        const fixed = fixEncoding(book.author)
        if (fixed !== book.author) {
          updates.author = fixed
          hasChanges = true
          console.log(`‚úèÔ∏è  Auteur: "${book.author}" -> "${fixed}"`)
        }
      }
      
      if (book.publisher && (book.publisher.includes('√É') || book.publisher.includes('ÔøΩ'))) {
        const fixed = fixEncoding(book.publisher)
        if (fixed !== book.publisher) {
          updates.publisher = fixed
          hasChanges = true
        }
      }
      
      if (book.language && (book.language.includes('√É') || book.language.includes('ÔøΩ') || book.language.includes('Fran'))) {
        const fixed = fixEncoding(book.language)
        if (fixed !== book.language) {
          updates.language = fixed
          hasChanges = true
          console.log(`‚úèÔ∏è  Langue: "${book.language}" -> "${fixed}"`)
        }
      }
      
      if (book.genres && (book.genres.includes('√É') || book.genres.includes('ÔøΩ'))) {
        const fixed = fixEncoding(book.genres)
        if (fixed !== book.genres) {
          updates.genres = fixed
          hasChanges = true
        }
      }

      if (book.description && (book.description.includes('√É') || book.description.includes('ÔøΩ'))) {
        const fixed = fixEncoding(book.description)
        if (fixed !== book.description) {
          updates.description = fixed
          hasChanges = true
        }
      }

      if (hasChanges) {
        fixedEncoding++
      }

      // R√©cup√©rer la couverture si manquante
      if (!book.coverUrl) {
        console.log(`üîç [${processed}/${allBooks.length}] Recherche couverture: ${updates.title || book.title}`)
        const metadata = await fetchGoogleBooksMetadata({
          isbn: book.isbn,
          title: updates.title || book.title,
          author: updates.author || book.author
        })

        if (metadata?.coverUrl) {
          updates.coverUrl = metadata.coverUrl
          addedCovers++
          console.log(`   ‚úÖ Couverture trouv√©e!`)
        } else {
          console.log(`   ‚ùå Couverture non trouv√©e`)
        }

        // Pause pour √©viter rate limiting
        await new Promise(resolve => setTimeout(resolve, 200))
      }

      // Mettre √† jour le livre si n√©cessaire
      if (Object.keys(updates).length > 0) {
        await prisma.book.update({
          where: { id: book.id },
          data: updates
        })
      }

    } catch (error) {
      console.error(`‚ùå Erreur pour ${book.title}:`, error)
      errors++
    }

    // Afficher la progression tous les 50 livres
    if (processed % 50 === 0) {
      console.log(`\nüìä Progression: ${processed}/${allBooks.length} livres trait√©s`)
      console.log(`   - ${fixedEncoding} livres corrig√©s (encodage)`)
      console.log(`   - ${addedCovers} couvertures ajout√©es\n`)
    }
  }

  console.log('\n‚úÖ CORRECTION TERMIN√âE!\n')
  console.log(`üìä R√©sultats finaux:`)
  console.log(`   - ${allBooks.length} livres trait√©s`)
  console.log(`   - ${fixedEncoding} livres corrig√©s (encodage)`)
  console.log(`   - ${addedCovers} couvertures ajout√©es`)
  console.log(`   - ${errors} erreurs`)

  await prisma.$disconnect()
}

main().catch(console.error)

