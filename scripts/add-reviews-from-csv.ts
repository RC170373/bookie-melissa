/**
 * Script pour ajouter UNIQUEMENT les critiques du CSV
 */

import { PrismaClient } from '../node_modules/@prisma/client/default.js'
import * as fs from 'fs'

const prisma = new PrismaClient()

// Fonction pour corriger l'encodage Windows-1252 -> UTF-8
function fixEncoding(text: string): string {
  if (!text) return text
  
  return text
    .replace(/√É¬©/g, '√©')
    .replace(/√É¬®/g, '√®')
    .replace(/√É¬™/g, '√™')
    .replace(/√É¬´/g, '√´')
    .replace(/√É /g, '√†')
    .replace(/√É¬¢/g, '√¢')
    .replace(/√É¬¥/g, '√¥')
    .replace(/√É¬π/g, '√π')
    .replace(/√É¬ª/g, '√ª')
    .replace(/√É¬Æ/g, '√Æ')
    .replace(/√É¬Ø/g, '√Ø')
    .replace(/√É¬ß/g, '√ß')
    .replace(/√Ö\u0093/g, '≈ì')
    .replace(/√É\u0089/g, '√â')
    .replace(/√É\u0088/g, '√à')
    .replace(/√É\u008A/g, '√ä')
    .replace(/√É\u0080/g, '√Ä')
    .replace(/√É\u0082/g, '√Ç')
    .replace(/√É\u0094/g, '√î')
    .replace(/√É\u0099/g, '√ô')
    .replace(/√É\u009B/g, '√õ')
    .replace(/√É\u008E/g, '√é')
    .replace(/√É\u0087/g, '√á')
    .replace(/√Ö\u0092/g, '≈í')
    .replace(/ÔøΩ/g, 'e')
}

function parseCSV(filePath: string): any[] {
  const text = fs.readFileSync(filePath, 'utf-8')
  const fixedText = fixEncoding(text)
  
  const lines = fixedText.split('\n').filter(line => line.trim())
  if (lines.length < 2) return []

  const firstLine = lines[0]
  const delimiter = firstLine.includes(';') ? ';' : firstLine.includes('\t') ? '\t' : ','

  const headers = lines[0].split(delimiter).map(h => h.trim().replace(/^"|"$/g, '').toLowerCase())
  const books: any[] = []

  for (let i = 1; i < lines.length; i++) {
    if (!lines[i].trim()) continue

    const values: string[] = []
    let current = ''
    let inQuotes = false

    for (let j = 0; j < lines[i].length; j++) {
      const char = lines[i][j]

      if (char === '"') {
        if (inQuotes && lines[i][j + 1] === '"') {
          current += '"'
          j++
        } else {
          inQuotes = !inQuotes
        }
      } else if (char === delimiter && !inQuotes) {
        values.push(current.trim())
        current = ''
      } else {
        current += char
      }
    }
    values.push(current.trim())

    const book: any = {}
    headers.forEach((header, index) => {
      book[header] = values[index] || ''
    })

    books.push(book)
  }

  return books
}

async function main() {
  console.log('üöÄ Ajout des critiques du CSV Livraddict...\n')

  const csvPath = process.argv[2] || '~/Downloads/export_livraddict_bibliotheque.csv'
  const expandedPath = csvPath.replace('~', process.env.HOME || '')

  if (!fs.existsSync(expandedPath)) {
    console.error('‚ùå Fichier CSV introuvable:', expandedPath)
    process.exit(1)
  }

  console.log('üìÇ Lecture du CSV:', expandedPath)
  const csvBooks = parseCSV(expandedPath)
  console.log(`‚úÖ ${csvBooks.length} livres trouv√©s dans le CSV\n`)

  // Cr√©er un mapping titre+auteur -> critique
  const reviewMap = new Map<string, string>()
  
  csvBooks.forEach(csvBook => {
    const getField = (possibleNames: string[]) => {
      for (const name of possibleNames) {
        if (csvBook[name] && csvBook[name].trim()) {
          return csvBook[name].trim()
        }
      }
      return null
    }

    const title = getField(['titre vf', 'titre', 'title', 'book title'])
    const author = getField(['auteur(s)', 'auteur', 'author', 'authors'])
    const review = getField(['critique', 'review', 'avis', 'commentaire', 'comment', 'commentaires'])

    if (title && author && review) {
      const key = `${title.toLowerCase()}|||${author.toLowerCase()}`
      reviewMap.set(key, review)
      console.log(`üìù Critique trouv√©e pour: ${title}`)
    }
  })

  console.log(`\n‚úÖ ${reviewMap.size} critiques trouv√©es dans le CSV\n`)

  // R√©cup√©rer tous les UserBooks
  const allUserBooks = await prisma.userBook.findMany({
    include: {
      book: true
    }
  })

  console.log(`üìö ${allUserBooks.length} livres dans votre biblioth√®que\n`)

  let addedReviews = 0
  let alreadyHasReview = 0
  let notFound = 0

  for (const userBook of allUserBooks) {
    try {
      // Si le livre a d√©j√† une critique, on ne la remplace pas
      if (userBook.review && userBook.review.trim()) {
        alreadyHasReview++
        continue
      }

      const key = `${userBook.book.title.toLowerCase()}|||${userBook.book.author.toLowerCase()}`
      const review = reviewMap.get(key)

      if (review) {
        await prisma.userBook.update({
          where: { id: userBook.id },
          data: { review: review }
        })
        addedReviews++
        console.log(`‚úÖ Critique ajout√©e pour: ${userBook.book.title}`)
      } else {
        notFound++
      }

    } catch (error) {
      console.error(`‚ùå Erreur pour ${userBook.book.title}:`, error)
    }
  }

  console.log('\n‚úÖ AJOUT DES CRITIQUES TERMIN√â!\n')
  console.log(`üìä R√©sultats:`)
  console.log(`   - ${addedReviews} critiques ajout√©es`)
  console.log(`   - ${alreadyHasReview} livres avaient d√©j√† une critique`)
  console.log(`   - ${notFound} livres sans critique dans le CSV`)

  await prisma.$disconnect()
}

main().catch(console.error)

